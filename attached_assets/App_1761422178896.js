const socket = io();
let localStream;
let remoteStream;
let peerConnection;
let currentCallTarget = null;
let isCalling = false;
let callStartTime = null;
let callTimerInterval = null;
let currentUsername = '';

const configuration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
    ]
};

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const loginScreen = document.getElementById('loginScreen');
const mainContainer = document.getElementById('mainContainer');
const usersList = document.getElementById('usersList');
const messages = document.getElementById('messages');
const messageInput = document.getElementById('messageInput');
const userCount = document.getElementById('userCount');
const connectionStatus = document.getElementById('connectionStatus');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    initializeSocketEvents();
});

function initializeApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('joinButton').addEventListener('click', joinChat);
    document.getElementById('usernameInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') joinChat();
    });
    
    document.getElementById('sendButton').addEventListener('click', sendMessage);
    document.getElementById('messageInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') sendMessage();
    });
    
    document.getElementById('endCallButton').addEventListener('click', endCall);
    document.getElementById('acceptCallButton').addEventListener('click', acceptCall);
    document.getElementById('rejectCallButton').addEventListener('click', rejectCall);
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    document.getElementById('usernameInput').focus();
}

function initializeSocketEvents() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.io
    socket.on('connect', () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        connectionStatus.className = 'connection-status connected';
        showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
    });

    socket.on('disconnect', () => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        connectionStatus.className = 'connection-status disconnected';
        showNotification('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    });

    socket.on('join-success', (data) => {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', data);
        currentUsername = data.username;
        updateUsersList(data.users);
        showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.username}!`, 'success');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        loginScreen.style.display = 'none';
        mainContainer.style.display = 'grid';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            mainContainer.classList.add('loaded');
        }, 100);
    });

    socket.on('join-error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        showNotification(error, 'error');
    });

    socket.on('users-update', (users) => {
        updateUsersList(users);
    });

    socket.on('user-joined', (data) => {
        console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data.username);
        updateUsersList(data.users);
        addSystemMessage(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
        showNotification(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`, 'success');
    });

    socket.on('user-left', (data) => {
        console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª:', data.username);
        updateUsersList(data.users);
        addSystemMessage(`${data.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
        showNotification(`${data.username} –≤—ã—à–µ–ª`, 'warning');
    });

    socket.on('receive-message', (data) => {
        addMessage(data);
    });

    // WebRTC —Å–æ–±—ã—Ç–∏—è
    socket.on('incoming-call', (data) => {
        console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', data.callerName);
        showIncomingCall(data.callerName, data.from);
    });

    socket.on('call-initiated', (data) => {
        showNotification(`–ó–≤–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.target}...`, 'success');
    });

    socket.on('call-accepted', () => {
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
        startCallTimer();
        showNotification('–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç', 'success');
    });

    socket.on('call-rejected', () => {
        console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        showNotification('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'error');
        endCall();
    });

    socket.on('call-ended', () => {
        console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
        showNotification('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'warning');
        endCall();
    });

    socket.on('call-error', (error) => {
        showNotification(error, 'error');
        endCall();
    });

    // WebRTC —Å–∏–≥–Ω–∞–ª—ã
    socket.on('webrtc-offer', async (data) => {
        if (!peerConnection) await createPeerConnection();
        await handleOffer(data.offer);
    });

    socket.on('webrtc-answer', async (data) => {
        if (peerConnection) {
            await peerConnection.setRemoteDescription(data.answer);
        }
    });

    socket.on('webrtc-ice-candidate', async (data) => {
        if (peerConnection) {
            await peerConnection.addIceCandidate(data.candidate);
        }
    });
}

function joinChat() {
    const usernameInput = document.getElementById('usernameInput');
    const username = usernameInput.value.trim();
    
    if (!username) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        usernameInput.focus();
        return;
    }
    
    if (username.length < 2) {
        showNotification('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞', 'error');
        usernameInput.focus();
        return;
    }
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', username);
    socket.emit('join', username);
}

function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    
    if (!currentUsername) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —á–∞—Ç—É', 'error');
        return;
    }
    
    socket.emit('send-message', { message });
    messageInput.value = '';
}

function updateUsersList(users) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users);
    
    const usersListElement = document.getElementById('usersList');
    const userCountElement = document.getElementById('userCount');
    
    if (!users || users.length === 0) {
        usersListElement.innerHTML = '<div class="empty-state">–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        userCountElement.textContent = '0';
        return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const otherUsers = users.filter(user => user.username !== currentUsername);
    userCountElement.textContent = otherUsers.length;
    
    if (otherUsers.length === 0) {
        usersListElement.innerHTML = '<div class="empty-state">–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        return;
    }
    
    usersListElement.innerHTML = '';
    otherUsers.forEach(user => {
        const userElement = document.createElement('div');
        userElement.className = 'user-item';
        userElement.innerHTML = `
            <div class="user-info">
                <div class="user-avatar">${user.username.charAt(0).toUpperCase()}</div>
                <span class="user-name">${user.username}</span>
            </div>
            <button class="call-btn" onclick="startCall('${user.username}')">
                üìû
            </button>
        `;
        usersListElement.appendChild(userElement);
    });
}

function addMessage(data) {
    const messagesElement = document.getElementById('messages');
    const messageElement = document.createElement('div');
    
    messageElement.className = `message ${data.username === currentUsername ? 'own' : 'other'}`;
    messageElement.innerHTML = `
        <div class="message-header">
            <span class="message-sender">${data.username}</span>
            <span class="message-time">${data.timestamp}</span>
        </div>
        <div class="message-text">${data.message}</div>
    `;
    
    messagesElement.appendChild(messageElement);
    messagesElement.scrollTop = messagesElement.scrollHeight;
}

function addSystemMessage(message) {
    const messagesElement = document.getElementById('messages');
    const messageElement = document.createElement('div');
    
    messageElement.className = 'message system';
    messageElement.innerHTML = `
        <div class="message-text">${message}</div>
    `;
    
    messagesElement.appendChild(messageElement);
    messagesElement.scrollTop = messagesElement.scrollHeight;
}

function showNotification(message, type = 'info') {
    const container = document.getElementById('notificationContainer');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// WebRTC —Ñ—É–Ω–∫—Ü–∏–∏
async function startCall(targetUsername) {
    if (isCalling) {
        showNotification('–£–∂–µ –∏–¥–µ—Ç –∑–≤–æ–Ω–æ–∫!', 'error');
        return;
    }
    
    try {
        console.log('üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å:', targetUsername);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
        localStream = await navigator.mediaDevices.getUserMedia({ 
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            } 
        });
        
        currentCallTarget = targetUsername;
        isCalling = true;
        
        // –°–æ–∑–¥–∞–µ–º peer connection
        await createPeerConnection();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫
        socket.emit('call-user', {
            targetUsername: targetUsername
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–º
        document.getElementById('callControls').style.display = 'flex';
        document.getElementById('callStatus').textContent = `–ó–≤–æ–Ω–æ–∫ ${targetUsername}...`;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ' + error.message, 'error');
        isCalling = false;
    }
}

async function createPeerConnection() {
    peerConnection = new RTCPeerConnection(configuration);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
    if (localStream) {
        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    peerConnection.ontrack = (event) => {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        remoteStream = event.streams[0];
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –∑–≤—É–∫
        const remoteAudio = new Audio();
        remoteAudio.srcObject = remoteStream;
        remoteAudio.play().catch(e => console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e));
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    peerConnection.onicecandidate = (event) => {
        if (event.candidate && currentCallTarget) {
            socket.emit('webrtc-ice-candidate', {
                target: getTargetSocketId(),
                candidate: event.candidate
            });
        }
    };
    
    return peerConnection;
}

async function handleOffer(offer) {
    if (!peerConnection) await createPeerConnection();
    await peerConnection.setRemoteDescription(offer);
    
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    
    socket.emit('webrtc-answer', {
        target: getTargetSocketId(),
        answer: answer
    });
}

function showIncomingCall(callerName, callerId) {
    document.getElementById('callerName').textContent = callerName;
    document.getElementById('incomingCall').style.display = 'flex';
    currentCallTarget = callerName;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–≤–æ–Ω—è—â–µ–≥–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    document.getElementById('incomingCall').dataset.callerId = callerId;
}

async function acceptCall() {
    try {
        console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
        localStream = await navigator.mediaDevices.getUserMedia({ 
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            } 
        });
        
        isCalling = true;
        
        // –°–æ–∑–¥–∞–µ–º peer connection
        await createPeerConnection();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const callerId = document.getElementById('incomingCall').dataset.callerId;
        socket.emit('accept-call', { callerId: callerId });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–º
        document.getElementById('incomingCall').style.display = 'none';
        document.getElementById('callControls').style.display = 'flex';
        document.getElementById('callStatus').textContent = `–†–∞–∑–≥–æ–≤–æ—Ä —Å ${currentCallTarget}`;
        
        startCallTimer();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'error');
        rejectCall();
    }
}

function rejectCall() {
    const callerId = document.getElementById('incomingCall').dataset.callerId;
    socket.emit('reject-call', { callerId: callerId });
    document.getElementById('incomingCall').style.display = 'none';
    currentCallTarget = null;
}

function endCall() {
    console.log('üìû –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫');
    
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }
    
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    stopCallTimer();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    document.getElementById('callControls').style.display = 'none';
    document.getElementById('incomingCall').style.display = 'none';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
    if (currentCallTarget) {
        socket.emit('end-call', { 
            targetId: getTargetSocketId() 
        });
    }
    
    currentCallTarget = null;
    isCalling = false;
}

function getTargetSocketId() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å socket.id —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º broadcast
    return 'broadcast';
}

function startCallTimer() {
    callStartTime = new Date();
    callTimerInterval = setInterval(updateCallTimer, 1000);
}

function stopCallTimer() {
    if (callTimerInterval) {
        clearInterval(callTimerInterval);
        callTimerInterval = null;
    }
    document.getElementById('callTimer').textContent = '00:00';
}

function updateCallTimer() {
    if (!callStartTime) return;
    
    const now = new Date();
    const diff = Math.floor((now - callStartTime) / 1000);
    const minutes = Math.floor(diff / 60).toString().padStart(2, '0');
    const seconds = (diff % 60).toString().padStart(2, '0');
    
    document.getElementById('callTimer').textContent = `${minutes}:${seconds}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (isCalling) {
        endCall();
    }
});